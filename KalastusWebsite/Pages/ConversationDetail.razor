@page "/conversation/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

@code {
    [Parameter]
    public int Id { get; set; } // Conversation ID from URL

    private Conversation? conversation;
    private List<Comment> comments = new();
    private string newCommentText = string.Empty;
    private string? commentError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the conversation and associated comments
            conversation = await _context.Conversations
            .Include(c => c.Comments)
            .FirstOrDefaultAsync(c => c.Id == Id);

            if (conversation != null)
            {
                comments = conversation.Comments
                .OrderBy(c => c.CreatedAt)
                .ToList();
            }
            else
            {
                // Redirect if conversation is not found
                NavigationManager.NavigateTo("/conversations");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversation: {ex.Message}");
            NavigationManager.NavigateTo("/conversations");
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Comment cannot be empty.";
            return;
        }

        if (conversation == null)
        {
            commentError = "Conversation not found.";
            return;
        }

        try
        {
            // Create a new comment
            var newComment = new Comment
                {
                    ConversationId = conversation.Id,
                    Text = newCommentText,
                    Author = UserSession.Username,
                    CreatedAt = DateTime.Now
                };

            // Add and save to the database
            _context.Comments.Add(newComment);
            await _context.SaveChangesAsync();

            // Clear the form and refresh comments
            newCommentText = string.Empty;
            commentError = null;
            comments.Add(newComment);
        }
        catch (Exception ex)
        {
            commentError = "An error occurred while adding the comment.";
            Console.WriteLine($"Error adding comment: {ex.Message}");
        }
    }
}

@if (conversation != null)
{
    <div class="conversation-detail">
        <h2>@conversation.Title</h2>
        <p><small>Posted by @conversation.Username on @conversation.CreatedAt</small></p>
        <p>@conversation.Content</p>
    </div>

    <h4>Comments</h4>

    @if (comments.Any())
    {
        <div class="comments-section">
            @foreach (var comment in comments)
            {
                <div class="comment">
                    <p><strong>@comment.Author</strong> - <small>@comment.CreatedAt.ToString("g")</small></p>
                    <p>@comment.Text</p>
                </div>
            }
        </div>
    }
    else
    {
        <p>No comments yet. Be the first to comment!</p>
    }

    @if (UserSession.IsLoggedIn)
    {
        <EditForm OnValidSubmit="AddComment">
            <div class="form-group">
                <label for="newComment">Add a comment:</label>
                <InputTextArea id="newComment" class="form-control" @bind-Value="newCommentText" />
                <ValidationMessage For="@(() => newCommentText)" />
            </div>
            <button class="btn btn-primary" type="submit">Post Comment</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(commentError))
        {
            <p style="color: red;">@commentError</p>
        }
    }
    else
    {
        <p>Please log in to comment.</p>
    }
}
else
{
    <p>Loading...</p>
}

<style>
    .conversation-detail {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-width: 600px;
        margin: 20px auto;
    }

    .comments-section {
        margin-top: 20px;
    }

    .comment {
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
    }
</style>
