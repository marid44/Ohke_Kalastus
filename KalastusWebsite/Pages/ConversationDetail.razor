@page "/conversation/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

<h3>Keskustelun tiedot</h3>

@if (conversation != null)
{
    <div class="conversation-detail">
        <h2>@conversation.Title</h2>
        <p>@conversation.Content</p>
        <p><small>Luonut: @conversation.Username, @conversation.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small></p>

        <h4>Kommentit</h4>

        @if (comments.Any())
        {
            <div class="comments-section">
                @foreach (var comment in comments)
                {
                    <div class="comment">
                        <p>
                            <strong>@comment.Username</strong> -
                            <small>@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </p>
                        <p>@comment.Text</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Ei vielä kommentteja. Ole ensimmäinen!</p>
        }

        @if (UserSession.IsLoggedIn)
        {
            <EditForm Model="this" OnValidSubmit="AddComment">
                <div class="form-group">
                    <label for="newComment">Lisää kommentti:</label>
                    <InputTextArea id="newComment" class="form-control" @bind-Value="newCommentText" />
                    <ValidationMessage For="@(() => newCommentText)" />
                </div>
                <button class="btn btn-primary" type="submit">Lähetä kommentti</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(commentError))
            {
                <p style="color: red;">@commentError</p>
            }
        }
        else
        {
            <p>Kirjaudu sisään kommentoidaksesi.</p>
        }
    </div>
}
else
{
    <p>Ladataan keskustelua...</p>
}

@code {
    [Parameter]
    public int Id { get; set; } // URL-parametri

    private Conversation? conversation;
    private List<Comment> comments = new();
    private string newCommentText = string.Empty;
    private string? commentError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Ladataan keskustelu ID:llä {Id}");

            // Hae keskustelu ja sen kommentit
            conversation = await _context.Conversations
            .Include(c => c.Comments)
            .FirstOrDefaultAsync(c => c.Id == Id);

            if (conversation != null)
            {
                Console.WriteLine($"Keskustelu löytyi: {conversation.Title}");
                comments = conversation.Comments
                .OrderBy(c => c.CreatedAt)
                .ToList();
            }
            else
            {
                Console.WriteLine("Keskustelua ei löytynyt.");
                NavigationManager.NavigateTo("/conversations");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe keskustelun lataamisessa: {ex.Message}");
            NavigationManager.NavigateTo("/conversations");
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Kommentti ei voi olla tyhjä.";
            return;
        }

        if (conversation == null)
        {
            commentError = "Keskustelua ei löytynyt.";
            return;
        }

        try
        {
            Console.WriteLine($"Lisätään kommentti käyttäjältä: {UserSession.Username}");

            var newComment = new Comment
                {
                    ConversationId = conversation.Id,
                    Text = newCommentText,
                    Username = UserSession.Username ?? "Tuntematon käyttäjä",
                    CreatedAt = DateTime.Now
                };

            // Tallenna kommentti tietokantaan
            _context.Comments.Add(newComment);
            await _context.SaveChangesAsync();

            // Päivitä paikallinen kommenttilista
            comments.Add(newComment);
            newCommentText = string.Empty;
            commentError = null;

            Console.WriteLine("Kommentti lisätty onnistuneesti.");
        }
        catch (Exception ex)
        {
            commentError = "Virhe kommentin lisäämisessä.";
            Console.WriteLine($"Virhe kommenttia lisättäessä: {ex.Message}");
        }
    }
}
