@page "/conversation/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

@code {
    [Parameter]
    public int Id { get; set; } // This will receive the conversation ID from the URL

    private Conversation? conversation;
    private List<Comment> comments = new List<Comment>();
    private string newCommentText = string.Empty;
    private string? commentError;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the conversation and associated comments
        conversation = await _context.Conversations.FindAsync(Id);

        if (conversation != null)
        {
            comments = await _context.Comments
            .Where(c => c.ConversationId == conversation.Id)
            .OrderBy(c => c.CreatedAt)
            .ToListAsync();
        }
        else
        {
            // Redirect if conversation is not found
            NavigationManager.NavigateTo("/conversations");
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Comment cannot be empty.";
            return;
        }

        // Create a new comment
        var newComment = new Comment
            {
                ConversationId = conversation.Id,
                Text = newCommentText,
                Username = UserSession.Username,
                CreatedAt = DateTime.Now
            };

        // Add and save to the database
        _context.Comments.Add(newComment);
        await _context.SaveChangesAsync();

        // Clear the form and refresh comments
        newCommentText = string.Empty;
        commentError = null;
        comments.Add(newComment);
    }

    private async Task UpvoteConversation()
    {
        if (conversation != null)
        {
            conversation.Upvotes++;
            await _context.SaveChangesAsync(); // Save changes to the database
        }
    }

    private async Task DownvoteConversation()
    {
        if (conversation != null)
        {
            conversation.Downvotes++;
            await _context.SaveChangesAsync(); // Save changes to the database
        }
    }

    private async Task UpvoteComment(Comment comment)
    {
        comment.Upvotes++;
        await _context.SaveChangesAsync();
    }

    private async Task DownvoteComment(Comment comment)
    {
        comment.Downvotes++;
        await _context.SaveChangesAsync();
    }
}

@if (conversation != null)
{
    <div class="conversation-detail">
        <h2>@conversation.Title</h2>
        <p><small>Posted by @conversation.Username on @conversation.CreatedAt</small></p>
        <p>@conversation.Content</p>

        <!-- Voting Section for Conversation -->
        <div class="voting">
            <button class="btn btn-success" @onclick="UpvoteConversation">üëç @conversation.Upvotes</button>
            <button class="btn btn-danger" @onclick="DownvoteConversation">üëé @conversation.Downvotes</button>
        </div>
    </div>

    <h4>Kommentit</h4>

    @if (comments.Any())
    {
        <div class="comments-section">
            @foreach (var comment in comments)
            {
                <div class="comment">
                    <p><strong>@comment.Username</strong> - <small>@comment.CreatedAt</small></p>
                    <p>@comment.Text</p>

                    <!-- Voting Section for Comments -->
                    <div class="comment-voting">
                        <button class="btn btn-outline-success btn-sm" @onclick="() => UpvoteComment(comment)">üëç
                            @comment.Upvotes</button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DownvoteComment(comment)">üëé
                            @comment.Downvotes</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>Ei kommentteja. Ole ensimm√§inen kommentoija!</p>
    }

    @if (UserSession.IsLoggedIn)
    {
        <EditForm Model="@this" OnValidSubmit="AddComment">
            <div class="form-group">
                <label for="newComment">Add a comment:</label>
                <InputTextArea id="newComment" class="form-control" @bind-Value="newCommentText" />
                <ValidationMessage For="@(() => newCommentText)" />
            </div>
            <button class="btn btn-primary" type="submit">Post Comment</button>
        </EditForm>

        @if (commentError != null)
        {
            <p style="color: red;">@commentError</p>
        }
    }
    else
    {
        <p>Kirjaudu sis√§√§n kommentoidaksesi.</p>
    }
}
else
{
    <p>Loading...</p>
}

<style>
    .conversation-detail {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-width: 600px;
        margin: 20px auto;
    }

    .voting {
        margin: 10px 0;
    }

    .voting button {
        margin-right: 10px;
        font-size: 16px;
    }

    .comments-section {
        margin-top: 20px;
    }

    .comment {
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .comment-voting {
        margin-top: 5px;
    }

    .comment-voting button {
        margin-right: 5px;
    }
</style>
