@page "/conversation/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

@code {
    [Parameter]
    public int Id { get; set; } // This will receive the conversation ID from the URL

    private Conversation? conversation;
    private List<Comment> comments = new List<Comment>();
    private string newCommentText = string.Empty;
    private string? commentError;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the conversation and associated comments
        conversation = await _context.Conversations.FindAsync(Id);

        if (conversation != null)
        {
            comments = await _context.Comments
            .Where(c => c.ConversationId == conversation.Id)
            .OrderBy(c => c.CreatedAt)
            .ToListAsync();
        }
        else
        {
            // Redirect if conversation is not found
            NavigationManager.NavigateTo("/conversations");
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Comment cannot be empty.";
            return;
        }

        // Create a new comment
        var newComment = new Comment
            {
                ConversationId = conversation.Id,
                Text = newCommentText,
                Username = UserSession.Username,
                CreatedAt = DateTime.Now
            };

        // Add and save to the database
        _context.Comments.Add(newComment);
        await _context.SaveChangesAsync();

        // Clear the form and refresh comments
        newCommentText = string.Empty;
        commentError = null;
        comments.Add(newComment);
    }
}

@if (conversation != null)
{
    <div class="conversation-detail">
        <h2>@conversation.Title</h2>
        <p><small>Posted by @conversation.Username on @conversation.CreatedAt</small></p>
        <p>@conversation.Content</p>
    </div>

    <h4>Kommentit</h4>

    @if (comments.Any())
    {
        <div class="comments-section">
            @foreach (var comment in comments)
            {
                <div class="comment">
                    <p><strong>@comment.Username</strong> - <small>@comment.CreatedAt</small></p>
                    <p>@comment.Text</p>
                </div>
            }
        </div>
    }
    else
    {
        <p>Ei kommentteja. Ole ensimmäinen kommentoija!</p>
    }

    @if (UserSession.IsLoggedIn)
    {
        <EditForm Model="@this" OnValidSubmit="AddComment"> <!-- Ensure Model or EditContext is set -->
            <div class="form-group">
                <label for="newComment">Add a comment:</label>
                <InputTextArea id="newComment" class="form-control" @bind-Value="newCommentText" />
                <ValidationMessage For="@(() => newCommentText)" />
            </div>
            <button class="btn btn-primary" type="submit">Post Comment</button>
        </EditForm>

        @if (commentError != null)
        {
            <p style="color: red;">@commentError</p>
        }
    }
    else
    {
        <p>Kirjaudu sisään kommentoidaksesi.</p>
    }
}
else
{
    <p>Loading...</p>
}

<style>
    .conversation-detail {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-width: 600px;
        margin: 20px auto;
        overflow: hidden;
        /* Prevents overflow */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comments-section {
        margin-top: 20px;
    }

    .comment {
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
        /* Prevents overflow */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comment p {
        margin: 5px 0;
        overflow: hidden;
        /* Prevents overflow */
        text-overflow: ellipsis;
        /* Adds ellipsis if text is too long */
        white-space: normal;
        /* Allows multiline content */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comment strong {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        /* Keeps username on a single line */
        display: inline-block;
        max-width: 100%;
        /* Ensures it doesn’t overflow */
    }

    .comment small {
        color: #999;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: inline-block;
        max-width: 100%;
    }

    textarea#newComment {
        width: 100%;
        resize: none;
        /* Prevents resizing of the text area */
        overflow: hidden;
        word-wrap: break-word;
        height: 100px;
        /* Set a fixed height for consistency */
    }

    button.btn {
        margin-top: 10px;
    }

    p {
        word-wrap: break-word;
        /* Ensures long text doesn't break layout */
    }
</style>