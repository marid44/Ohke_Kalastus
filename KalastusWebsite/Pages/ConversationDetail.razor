@page "/conversation/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

@code {
    [Parameter]
    public int Id { get; set; } // This will receive the conversation ID from the URL

    private bool isLoading = true;

    private Conversation? conversation;
    private List<Comment> comments = new List<Comment>();
    private string newCommentText = string.Empty;
    private string? commentError;

    private Dictionary<int, bool?> conversationVotes = new();
    private Dictionary<int, bool?> commentVotes = new();
    private bool isVoting = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        // Fetch the conversation and associated comments first
        conversation = await _context.Conversations.FindAsync(Id);

        if (conversation != null)
        {
            comments = await _context.Comments
            .Where(c => c.ConversationId == conversation.Id)
            .OrderBy(c => c.CreatedAt)
            .ToListAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/conversations");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Move session loading to after first render
            if (!UserSession.IsLoaded)
            {
                await UserSession.LoadSession();
            }

            await LoadVotesAsync();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadVotesAsync()
    {
        if (!UserSession.IsLoggedIn) return;

        var convVotes = await _context.ConversationVotes
        .Where(v => v.UserId == UserSession.UserId.ToString())
        .ToListAsync();

        var comVotes = await _context.CommentVotes
        .Where(v => v.UserId == UserSession.UserId.ToString())
        .ToListAsync();

        conversationVotes = convVotes.ToDictionary(v => v.ConversationId, v => (bool?)v.IsUpVote);
        commentVotes = comVotes.ToDictionary(v => v.CommentId, v => (bool?)v.IsUpVote);
    }

    private async Task ToggleConversationVote(int conversationId, bool isUpVote)
    {
        if (!UserSession.IsLoggedIn || isVoting) return;
        isVoting = true;

        try
        {
            var vote = await _context.ConversationVotes
            .FirstOrDefaultAsync(v => v.ConversationId == conversationId &&
            v.UserId == UserSession.UserId.ToString());

            if (vote != null)
            {
                if (vote.IsUpVote == isUpVote)
                {
                    _context.ConversationVotes.Remove(vote);
                    conversationVotes[conversationId] = null;
                }
                else
                {
                    vote.IsUpVote = isUpVote;
                    _context.ConversationVotes.Update(vote);
                    conversationVotes[conversationId] = isUpVote;
                }
            }
            else
            {
                var newVote = new ConversationVote
                    {
                        ConversationId = conversationId,
                        UserId = UserSession.UserId.ToString(),
                        IsUpVote = isUpVote
                    };
                _context.ConversationVotes.Add(newVote);
                conversationVotes[conversationId] = isUpVote;
            }

            await _context.SaveChangesAsync();
            StateHasChanged();
        }
        finally
        {
            isVoting = false;
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Comment cannot be empty.";
            return;
        }

        // Create a new comment
        var newComment = new Comment
            {
                ConversationId = conversation.Id,
                Text = newCommentText,
                Username = UserSession.Username,
                CreatedAt = DateTime.Now
            };

        // Add and save to the database
        _context.Comments.Add(newComment);
        await _context.SaveChangesAsync();

        // Clear the form and refresh comments
        newCommentText = string.Empty;
        commentError = null;
        comments.Add(newComment);
    }

    private bool IsConversationUpVoted(int id) =>
    conversationVotes.TryGetValue(id, out var vote) && vote == true;

    private bool IsConversationDownVoted(int id) =>
    conversationVotes.TryGetValue(id, out var vote) && vote == false;

    private int GetVoteCount(int conversationId, bool isUpVote)
    {
        return _context.ConversationVotes
        .Count(v => v.ConversationId == conversationId && v.IsUpVote == isUpVote);
    }
}

@if (isLoading)
{
    <p>Loading...</p>
}
    else if (conversation != null)
    {
        <div class="conversation-detail">
            <h2>@conversation.Title</h2>
            <p><small>Posted by @conversation.Username on @conversation.CreatedAt</small></p>
            <p>@conversation.Content</p>

            @if (UserSession.IsLoggedIn)
            {
                <div class="vote-buttons">
                    <button @onclick="() => ToggleConversationVote(conversation.Id, true)"
                        class="vote-button @(IsConversationUpVoted(conversation.Id) ? "active upvote" : "upvote")">
                        üëç @GetVoteCount(conversation.Id, true)
                    </button>
                    <button @onclick="() => ToggleConversationVote(conversation.Id, false)"
                        class="vote-button @(IsConversationDownVoted(conversation.Id) ? "active downvote" : "downvote")">
                        üëé @GetVoteCount(conversation.Id, false)
                    </button>
                </div>
            }
        </div>

        <h4>Kommentit</h4>

        @if (comments.Any())
        {
            <div class="comments-section">
                @foreach (var comment in comments)
                {
                    <div class="comment">
                        <p><strong>@comment.Username</strong> - <small>@comment.CreatedAt</small></p>
                        <p>@comment.Text</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Ei kommentteja. Ole ensimm√§inen kommentoija!</p>
        }

        @if (UserSession.IsLoggedIn)
        {
            <EditForm Model="@this" OnValidSubmit="AddComment"> <!-- Ensure Model or EditContext is set -->
                <div class="form-group">
                    <label for="newComment">Add a comment:</label>
                    <InputTextArea id="newComment" class="form-control" @bind-Value="newCommentText" />
                    <ValidationMessage For="@(() => newCommentText)" />
                </div>
                <button class="btn btn-primary" type="submit">Post Comment</button>
            </EditForm>

            @if (commentError != null)
            {
                <p style="color: red;">@commentError</p>
            }
        }
        else
        {
            <p>Kirjaudu sis√§√§n kommentoidaksesi.</p>
        }
    }   
    else
    {
        <p>Loading...</p>
    }



    

<style>
    .conversation-detail {
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-width: 600px;
        margin: 20px auto;
        overflow: hidden;
        /* Prevents overflow */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comments-section {
        margin-top: 20px;
    }

    .comment {
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
        /* Prevents overflow */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comment p {
        margin: 5px 0;
        overflow: hidden;
        /* Prevents overflow */
        text-overflow: ellipsis;
        /* Adds ellipsis if text is too long */
        white-space: normal;
        /* Allows multiline content */
        word-wrap: break-word;
        /* Ensures long words break onto the next line */
    }

    .comment strong {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        /* Keeps username on a single line */
        display: inline-block;
        max-width: 100%;
        /* Ensures it doesn‚Äôt overflow */
    }

    .comment small {
        color: #999;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: inline-block;
        max-width: 100%;
    }

    textarea#newComment {
        width: 100%;
        resize: none;
        /* Prevents resizing of the text area */
        overflow: hidden;
        word-wrap: break-word;
        height: 100px;
        /* Set a fixed height for consistency */
    }

    button.btn {
        margin-top: 10px;
    }

    p {
        word-wrap: break-word;
        /* Ensures long text doesn't break layout */
    }

    .vote-buttons {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }

    .vote-button {
        padding: 5px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .vote-button.upvote {
        background-color: #f0f0f0;
        color: #28a745;
    }

    .vote-button.downvote {
        background-color: #f0f0f0;
        color: #dc3545;
    }

    .vote-button.active.upvote {
        background-color: #28a745;
        color: white;
    }

    .vote-button.active.downvote {
        background-color: #dc3545;
        color: white;
    }

    .vote-button:hover {
        background-color: #ddd;
    }
</style>