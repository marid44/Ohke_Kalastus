@page "/image/{id:int}"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject UserSession UserSession

<style>
    .image-detail-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .image-display {
        max-width: 100%;
        max-height: 500px;
        margin-bottom: 20px;
        border-radius: 8px;
    }

    .comment-section {
        margin-top: 20px;
        text-align: left;
    }

    .comment-box {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        resize: none;
    }

    .btn-primary {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .comment-list {
        margin-top: 20px;
        padding-left: 0;
        list-style-type: none;
    }

    .comment-list li {
        margin-bottom: 10px;
        border-bottom: none;
        /* Poistettu viiva */
        padding-bottom: 10px;
    }
</style>

<div class="image-detail-container">
    @if (image != null)
    {
        <img src="@image.FilePath" alt="Kuva" class="image-display" />
        <h2>@image.FileName</h2>

        <!-- Kommenttiosio -->
        <div class="comment-section">
            <h3>Kommentit</h3>

            @if (image.Comments != null && image.Comments.Any())
            {
                <ul class="comment-list">
                    @foreach (var comment in image.Comments)
                    {
                        <li>
                            <strong>@comment.Username</strong>:<br />
                            <p>@comment.Text</p>
                            <small>@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Ei kommentteja.</p>
            }

            <!-- Lisää kommentti -->
            @if (UserSession?.IsLoggedIn ?? false)
            {
                <textarea class="comment-box" placeholder="Kirjoita kommentti..." @bind="newComment"></textarea>
                <button class="btn-primary" @onclick="AddComment">Lisää kommentti</button>
            }
            else
            {
                <p>Kirjaudu sisään lisätäksesi kommentin.</p>
            }
        </div>
    }
    else
    {
        <p style="color: red;">Kuvaa ei löytynyt.</p>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Media? image;
    private string newComment = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            image = await DbContext.MediaFiles
            .Include(m => m.Comments)
            .FirstOrDefaultAsync(m => m.Id == id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe kuvan lataamisessa: {ex.Message}");
        }
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment) && image != null)
        {
            var comment = new MediaComment
                {
                    MediaId = image.Id,
                    Text = newComment.Trim(),
                    Username = UserSession.Username,
                    CreatedAt = DateTime.Now
                };

            try
            {
                DbContext.MediaComments.Add(comment);
                await DbContext.SaveChangesAsync();

                image.Comments = await DbContext.MediaComments
                .Where(c => c.MediaId == image.Id)
                .ToListAsync();

                newComment = string.Empty;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Virhe kommentin lisäämisessä: {ex.Message}");
            }
        }
    }
}
