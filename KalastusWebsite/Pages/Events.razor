@page "/events"
@using KalastusWebsite.Models
@inject KalastusWebsite.Services.EventService EventService
@inject KalastusWebsite.Services.UserSession UserSession


<h1>Tapahtumat</h1>

<div>
    @if (UserSession.IsLoggedIn)
    {
    <h3>Luo uusi tapahtuma</h3>
    <input @bind="NewEventTitle" placeholder="Otsikko" />
    <input type="date" @bind="NewEventDate" />
    <p></p>
    <textarea @bind="NewEventDescription" placeholder="Kuvaus"></textarea>
    <p></p>
    <button @onclick="AddEvent">Lisää</button>
    }
    else
    {
        <p>Kirjaudu sisään, jotta voit lisätä tapahtumia.</p>
    }
</div>

<hr />

<div>
    <h3>Kaikki tapahtumat</h3>
    @if (events != null && events.Any())
    {
        <ul>
            @foreach (var ev in events)
            {
                <li>
                    <strong>@ev.Title</strong> (@ev.Date.ToShortDateString())<br />
                    @ev.Description<br />
                    <em>Luonut: @ev.CreatedBy</em>
                    @if (ev.CreatedBy == UserSession.Username)
                    {
                        <button @onclick="() => RemoveEvent(ev.Id)">Poista</button>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>Ei tapahtumia.</p>
    }
</div>

@code {
    private string NewEventTitle = string.Empty;
    private DateTime NewEventDate = DateTime.Now;
    private string NewEventDescription = string.Empty;
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        events = await EventService.GetEventsAsync();
    }

    private async Task AddEvent()
    {
        if (!UserSession.IsLoggedIn)
            return;

        var newEvent = new Event
            {
                Title = NewEventTitle,
                Date = NewEventDate,
                Description = NewEventDescription,
                CreatedBy = UserSession.Username
            };

        await EventService.AddEventAsync(newEvent);
        await LoadEvents();

        NewEventTitle = string.Empty;
        NewEventDate = DateTime.Now;
        NewEventDescription = string.Empty;
    }

    private async Task RemoveEvent(int id)
    {
        await EventService.RemoveEventAsync(id, UserSession.Username);
        await LoadEvents();
    }
}
