@page "/kartta"
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject HttpClient Http
@inject UserSession UserSession
@using KalastusWebsite.Models
@using KalastusWebsite.Services

<h3>Kalastus kartta</h3>

<!-- Search Bar and Button -->
<div style="margin-bottom: 10px;">
    <input id="searchInput" type="text" placeholder="Enter location" style="width: 300px; padding: 5px;" />
    <button @onclick="PerformSearch" style="padding: 5px;">Search</button>
</div>

<div id="map" style="height: 80vh; width: 100%;"></div>

@code {
    private List<Marker> markers = new();
    private string apiKey;

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.IsLoggedIn)
        {
            try
            {
                markers = await Http.GetFromJsonAsync<List<Marker>>($"api/Marker?userId={UserSession.UserId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching markers: {ex.Message}");
            }
        }
    }

    private async Task AddMarker(double latitude, double longitude)
    {
        var newMarker = new Marker
            {
                Latitude = latitude,
                Longitude = longitude,
                UserId = UserSession.UserId
            };

        var response = await Http.PostAsJsonAsync("api/Marker", newMarker);
        if (response.IsSuccessStatusCode)
        {
            markers.Add(newMarker);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            apiKey = Configuration["Maanmittauslaitos:ApiKey"];
            await JSRuntime.InvokeVoidAsync("initializeMap", apiKey);

            // Pass the user ID to JavaScript
            await JSRuntime.InvokeVoidAsync("eval", $"const USER_ID = {UserSession.UserId};");
        }
    }

    private async Task PerformSearch()
    {
        var searchQuery = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('searchInput').value");

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            await JSRuntime.InvokeVoidAsync("searchLocation", searchQuery, apiKey);
        }
    }

    private async Task ToggleRivers(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            await JSRuntime.InvokeVoidAsync("toggleLayer", "rivers", isChecked);
        }
    }
}

<style>
    #searchInput {
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 5px;
    }

    button {
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
    }

    button:hover {
        background-color: #0056b3;
    }
</style>
