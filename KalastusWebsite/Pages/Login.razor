@page "/login"
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using KalastusWebsite.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject NavigationManager NavigationManager
@inject UserSession UserSession

<div class="login-container">
    <div class="login-box">
        <h3>Kirjaudu</h3>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <div class="form-group">
                <label for="email">EMAIL</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email"
                    placeholder="Enter your email" />
            </div>
            <div class="form-group">
                <label for="password">PASSWORD</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password"
                    placeholder="Enter your password" />
            </div>
            <button class="btn btn-primary btn-submit" type="submit">LOGIN</button>
        </EditForm>
    </div>
</div>

<style>
    /* Keskittää kirjautumisboksin */
    .login-container {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f8f9fa;
        /* Vaalean harmaa tausta */
        margin: 0;
    }

    /* Kirjautumisboksi taustakuvalla */
    .login-box {
        background: url('/kalastus%20banner.jpg') no-repeat center center;
        background-size: cover;
        border-radius: 25px;
        padding: 50px;
        width: 450px;
        height: 600px;
        box-shadow: 0 15px 35px rgb(15, 15, 15);
        /* Musta varjo ympärillä */
        text-align: center;
        color: white;
        position: relative;
    }

    /* Musta kerros tekstin ja kuvan kontrastille */
    .login-box::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        /* Tumma kerros kuvan päälle */
        border-radius: 25px;
        z-index: 1;
    }

    .login-box h3,
    .login-box .form-group,
    .login-box button {
        position: relative;
        z-index: 2;
    }

    /* Otsikko */
    .login-box h3 {
        margin-bottom: 30px;
        font-size: 28px;
        font-weight: bold;
        color: #fff;
    }

    /* Lomakekentät */
    .form-group {
        margin-bottom: 25px;
        text-align: left;
    }

    .form-group label {
        display: block;
        margin-bottom: 10px;
        font-size: 14px;
        color: #ddd;
        text-transform: uppercase;
    }

    .form-control {
        width: 100%;
        padding: 15px;
        border: none;
        border-radius: 25px;
        background: rgba(255, 255, 255, 0.2);
        /* Läpinäkyvä kenttä */
        color: white;
        font-size: 16px;
        outline: none;
    }

    .form-control::placeholder {
        color: #aaa;
        font-style: italic;
    }

    .form-control:focus {
        background: rgba(255, 255, 255, 0.3);
        /* Hieman kirkkaampi kun valittu */
        box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
        /* Sininen varjo */
    }

    /* Lähetä-painike */
    .btn-submit {
        width: 100%;
        padding: 15px;
        border: none;
        border-radius: 25px;
        background: #007BFF;
        color: white;
        font-size: 16px;
        font-weight: bold;
        text-transform: uppercase;
        cursor: pointer;
        transition: background 0.3s, transform 0.2s;
        margin-top: 50px;
    }

    .btn-submit:hover {
        background: #0056b3;
        transform: translateY(-3px);
        /* Nousee hieman hoverilla */
    }

    .btn-submit:active {
        transform: translateY(0);
        /* Palaa alkuperäiseen kun klikattu */
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? loginError;

    private async Task HandleLogin()
    {
        var user = await _context.Users
        .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

        if (user != null && BCrypt.Net.BCrypt.Verify(loginModel.Password, user.Password))
        {
            loginError = null;

            UserSession.Username = user.Username;
            UserSession.IsLoggedIn = true;

            if (!string.IsNullOrEmpty(UserSession.RedirectUrl))
            {
                NavigationManager.NavigateTo(UserSession.RedirectUrl);
                UserSession.RedirectUrl = null;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            loginError = "Invalid email or password";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
