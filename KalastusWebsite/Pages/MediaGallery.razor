@page "/media-gallery"
@using KalastusWebsite.Models
@using KalastusWebsite.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Selaa k√§ytt√§jien kuvia ja videoita</h1>

@if (mediaFiles != null && mediaFiles.Any())
{
    <div class="media-gallery">
        @foreach (var media in mediaFiles)
        {
            <div class="media-item">
                <a href="/image/@media.Id">
                    @if (media.FileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase))
                    {
                        <video controls class="media-display">
                            <source src="@media.FilePath" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                    else
                    {
                        <img src="@media.FilePath" alt="Media kuva" class="media-display" />
                    }
                </a>

                <p><strong>L√§hett√§nyt:</strong> @media.UploadedBy</p>

                <div class="vote-buttons">
                    <button @onclick="() => ToggleVote(media.Id, true)"
                        class="vote-button @(IsUpVote(media.Id) ? "active upvote" : "upvote")">
                        üëç @GetVoteCount(media.Id, true)
                    </button>
                    <button @onclick="() => ToggleVote(media.Id, false)"
                        class="vote-button @(IsDownVote(media.Id) ? "active downvote" : "downvote")">
                        üëé @GetVoteCount(media.Id, false)
                    </button>
                </div>
            </div>
        }
    </div>
}
else if (mediaFiles != null)
{
    <p>Ei ladattuja kuvia tai videoita.</p>
}
else
{
    <p>Ladataan tietoja...</p>
}

<style>
    .media-gallery {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .media-item {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        width: 250px;
        text-align: center;
        background-color: white;
    }

    .media-item img,
    .media-item video {
        max-width: 100%;
        border-radius: 4px;
    }

    .vote-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }

    button {
        padding: 10px;
        font-size: 16px;
        margin: 5px;
        background-color: #f0f0f0;
        color: black;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    button.upvote {
        background-color: #f0f0f0;
        color: black;
    }

    button.downvote {
        background-color: #f0f0f0;
        color: black;
    }

    button.upvote.active {
        background-color: #28a745;
        color: white;
    }

    button.downvote.active {
        background-color: #dc3545;
        color: white;
    }
</style>

@code {
    private List<Media> mediaFiles = new();
    private Dictionary<int, bool?> userVotes = new();
    private string currentUserId;
    private bool isVoting = false;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await GetCurrentUserIdAsync();
        await LoadMediaFilesAsync();
        await LoadUserVotesAsync();
    }

    private async Task<string> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
        ? user.FindFirst(c => c.Type == "sub")?.Value ?? Guid.NewGuid().ToString()
        : Guid.NewGuid().ToString();
    }

    private async Task LoadMediaFilesAsync()
    {
        mediaFiles = await DbContext.MediaFiles
        .Include(m => m.Votes)
        .ToListAsync();
    }

    private async Task LoadUserVotesAsync()
    {
        var votes = await DbContext.Votes
        .Where(v => v.UserId == currentUserId)
        .ToListAsync();

        userVotes = votes.ToDictionary(v => v.MediaId, v => (bool?)v.IsUpVote);
    }

    private async Task ToggleVote(int mediaId, bool isUpVote)
    {
        if (isVoting) return; // Est√§ useat per√§kk√§iset √§√§nestykset
        isVoting = true;

        try
        {
            var existingVote = await DbContext.Votes
            .FirstOrDefaultAsync(v => v.MediaId == mediaId && v.UserId == currentUserId);

            if (existingVote != null)
            {
                if (existingVote.IsUpVote == isUpVote)
                {
                    // Poista √§√§ni, jos se on samanlainen
                    DbContext.Votes.Remove(existingVote);
                    userVotes[mediaId] = null;
                }
                else
                {
                    // P√§ivit√§ √§√§ni vastakkaiseksi
                    existingVote.IsUpVote = isUpVote;
                    DbContext.Votes.Update(existingVote);
                    userVotes[mediaId] = isUpVote;
                }
            }
            else
            {
                // Lis√§√§ uusi √§√§ni
                var newVote = new Vote
                    {
                        MediaId = mediaId,
                        UserId = currentUserId,
                        IsUpVote = isUpVote
                    };
                DbContext.Votes.Add(newVote);
                userVotes[mediaId] = isUpVote;
            }

            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe √§√§nest√§ess√§: {ex.Message}");
        }
        finally
        {
            isVoting = false;
        }
    }

    private bool IsUpVote(int mediaId) => userVotes.TryGetValue(mediaId, out var vote) && vote == true;
    private bool IsDownVote(int mediaId) => userVotes.TryGetValue(mediaId, out var vote) && vote == false;
    private int GetVoteCount(int mediaId, bool isUpVote)
    {
        var media = mediaFiles.FirstOrDefault(m => m.Id == mediaId);
        return media?.Votes.Count(v => v.IsUpVote == isUpVote) ?? 0;
    }
}
