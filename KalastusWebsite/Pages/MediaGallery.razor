@page "/media-gallery"
@using KalastusWebsite.Models
@using KalastusWebsite.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject KalastusWebsite.Services.UserSession UserSession


<h1>Selaa k√§ytt√§jien kuvia ja videoita</h1>

@if (mediaFiles != null && mediaFiles.Any())
{
    <div class="media-gallery">
        @foreach (var media in mediaFiles)
        {
            <div class="media-item">
                <a href="/image/@media.Id">
                    @if (media.FileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase))
                    {
                        <video controls class="media-display">
                            <source src="@media.FilePath" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                    else
                    {
                        <img src="@media.FilePath" alt="Media kuva" class="media-display" />
                    }
                </a>

                <!-- L√§hett√§j√§n nimi on linkitetty k√§ytt√§j√§n profiiliin -->
                <p><strong>L√§hett√§nyt:</strong>
                    <a href="/profile/@media.UploadedBy">@media.UploadedBy</a>
                </p>

                @if (UserSession.IsLoggedIn)
                {
                    <div class="vote-buttons">
                        <button @onclick="() => ToggleVote(media.Id, true)"
                            class="vote-button @(IsUpVote(media.Id) ? "active upvote" : "upvote")">
                            üëç @GetVoteCount(media.Id, true)
                        </button>
                        <button @onclick="() => ToggleVote(media.Id, false)"
                            class="vote-button @(IsDownVote(media.Id) ? "active downvote" : "downvote")">
                            üëé @GetVoteCount(media.Id, false)
                        </button>
                    </div>
                }
            </div>
        }
    </div>
}
else if (mediaFiles != null)
{
    <p>Ei ladattuja kuvia tai videoita.</p>
}
else
{
    <p>Ladataan tietoja...</p>
}

<style>
    /* Gallerian asettelu */
    .media-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        /* Joustavampi sarakeleveys */
        gap: 10px;
        /* Pienempi v√§limatka elementtien v√§lill√§ */
        margin: 0 auto;
        /* Keskitt√§√§ koko gallerian */
        padding: 5px;
        /* Pienempi gallerian sis√§inen tila */
        max-width: 1000px;
        /* Rajaa gallerian maksimileveyden */
    }

    /* Yksitt√§inen media-osa */
    .media-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        overflow: hidden;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 8px;
        width: 100%;
        max-width: 200px;
        /* Elementin maksimileveys */
    }

    /* Hover-efekti */
    .media-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    /* Media-elementit */
    .media-item img,
    .media-item video {
        max-width: 100%;
        max-height: 150px;
        border-radius: 6px;
        margin-bottom: 5px;
    }

    /* L√§hett√§j√§n tiedot */
    .media-item p {
        margin: 3px 0;
        font-size: 14px;
        color: #555;
    }

    .media-item a {
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
        font-size: 13px;
    }

    .media-item a:hover {
        text-decoration: underline;
    }

    /* √Ñ√§nestysnapit */
    .vote-buttons {
        display: flex;
        gap: 5px;
        /* V√§li painikkeiden v√§lill√§ */
        justify-content: center;
        margin-top: 3px;
    }

    .vote-button {
        padding: 6px 10px;
        font-size: 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .vote-button.upvote {
        background-color: #f0f0f0;
        color: #28a745;
        font-weight: bold;
    }

    .vote-button.downvote {
        background-color: #f0f0f0;
        color: #dc3545;
        font-weight: bold;
    }

    .vote-button.active.upvote {
        background-color: #28a745;
        color: white;
    }

    .vote-button.active.downvote {
        background-color: #dc3545;
        color: white;
    }

    /* Painikkeen hover-animaatio */
    .vote-button:hover {
        background-color: #ddd;
    }
</style>


@code {
    private List<Media> mediaFiles = new();
    private Dictionary<int, bool?> userVotes = new();
    private bool isVoting = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMediaFilesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!UserSession.IsLoaded)
            {
                await UserSession.LoadSession();
            }

            if (UserSession.IsLoggedIn)
            {
                await LoadUserVotesAsync();
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMediaFilesAsync()
    {
        mediaFiles = await DbContext.MediaFiles
        .Include(m => m.Votes)
        .OrderByDescending(m => m.UploadedAt)
        .ToListAsync();
    }

    private async Task LoadUserVotesAsync()
    {
        var votes = await DbContext.MediaVotes
        .Where(v => v.UserId == UserSession.UserId.ToString())
        .ToListAsync();

        userVotes = votes.ToDictionary(v => v.MediaId, v => (bool?)v.IsUpVote);
    }

    private async Task ToggleVote(int mediaId, bool isUpVote)
    {
        if (!UserSession.IsLoggedIn || isVoting) return;
        isVoting = true;

        try
        {
            var existingVote = await DbContext.MediaVotes
            .FirstOrDefaultAsync(v => v.MediaId == mediaId &&
            v.UserId == UserSession.UserId.ToString());

            if (existingVote != null)
            {
                if (existingVote.IsUpVote == isUpVote)
                {
                    DbContext.MediaVotes.Remove(existingVote);
                    userVotes[mediaId] = null;
                }
                else
                {
                    existingVote.IsUpVote = isUpVote;
                    DbContext.MediaVotes.Update(existingVote);
                    userVotes[mediaId] = isUpVote;
                }
            }
            else
            {
                var newVote = new MediaVote
                    {
                        MediaId = mediaId,
                        UserId = UserSession.UserId.ToString(),
                        IsUpVote = isUpVote
                    };
                DbContext.MediaVotes.Add(newVote);
                userVotes[mediaId] = isUpVote;
            }

            await DbContext.SaveChangesAsync();
            await LoadMediaFilesAsync();
            StateHasChanged();
        }
        finally
        {
            isVoting = false;
        }
    }

    private bool IsUpVote(int mediaId) => userVotes.TryGetValue(mediaId, out var vote) && vote == true;
    private bool IsDownVote(int mediaId) => userVotes.TryGetValue(mediaId, out var vote) && vote == false;
    private int GetVoteCount(int mediaId, bool isUpVote)
    {
        var media = mediaFiles.FirstOrDefault(m => m.Id == mediaId);
        return media?.Votes.Count(v => v.IsUpVote == isUpVote) ?? 0;
    }
}
