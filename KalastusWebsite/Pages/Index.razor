@page "/"
@using KalastusWebsite.Services
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@using Microsoft.EntityFrameworkCore
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject AppDbContext _context

<PageTitle>Kalastajien Yhteisö</PageTitle>

<div class="hero">
    <h1>Kalastajien yhteisö</h1>
    @if (!UserSession.IsLoggedIn)
    {
        <p>Liity jäseneksi, jaa kokemuksiasi, ja keskustele muiden kalastajien kanssa!</p>
        <button class="btn-register" @onclick="NavigateToRegister">Liity yhteisöön</button>
    }
</div>

<div class="container">
    <div class="welcome-message">
        @if (UserSession.IsLoggedIn)
        {
            <h2>Terve, @UserSession.Username!</h2>
        }
        else
        {
            <h2>Tervetuloa!</h2>
        }
    </div>

    <div class="action-buttons">
        <button class="btn-discussion" @onclick="NavigateToCreateDiscussion">Luo keskustelu</button>
        <button class="btn-view" @onclick="NavigateToDiscussions">Katsele keskusteluja</button>
        <button class="btn-media" @onclick="NavigateToMedia">Lisää kuvia</button>
        <button class="btn-gallery" @onclick="NavigateToMediaGallery">Selaa käyttäjien kuvia ja videoita</button>
    </div>

    <div class="recent-conversations">
        <h3>Uusimmat keskustelut</h3>
        <div class="conversation-scroll-box">
            @if (recentConversations != null && recentConversations.Any())
            {
                @foreach (var conversation in recentConversations)
                {
                    <div class="conversation-item" @onclick="() => NavigateToConversation(conversation.Id)">
                        <h4>@conversation.Title</h4>
                        <p class="conversation-meta">
                            <span>@conversation.Username</span>
                            <span>@conversation.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                        </p>
                        <p class="conversation-preview">
                            @(conversation.Content.Length > 100 ? conversation.Content.Substring(0, 100) + "..." :
                                conversation.Content)
                        </p>
                    </div>
                }
            }
            else
            {
                <p>Ei keskusteluja.</p>
            }
        </div>
    </div>
</div>

<style>
    /* Existing button styles */
    button {
        padding: 10px 20px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
        margin: 10px;
    }

    button:hover {
        transform: scale(1.05);
    }

    .btn-register,
    .btn-discussion,
    .btn-view,
    .btn-media,
    .btn-profile,
    .btn-gallery {
        background-color: #007bff;
        color: white;
    }

    .btn-register:hover,
    .btn-discussion:hover,
    .btn-view:hover,
    .btn-media:hover,
    .btn-profile:hover,
    .btn-gallery:hover {
        background-color: #0056b3;
    }

    /* Hero section */
    .hero {
        background-image: url('/kalastus banner.jpg');
        background-size: cover;
        background-position: center;
        text-align: center;
        padding: 80px 20px;
        color: white;
        border-radius: 10px;
        margin-bottom: 20px;
        position: relative;
    }

    .hero::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        z-index: -1;
    }

    .hero h1 {
        font-size: 2.5em;
        margin-bottom: 10px;
    }

    .hero p {
        font-size: 1.2em;
        margin-bottom: 20px;
    }

    .container {
        text-align: center;
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .welcome-message h2 {
        color: #333;
    }

    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
        margin-bottom: 30px;
    }

    /* New conversation list styles */
    .recent-conversations {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 20px 0;
        text-align: left;
    }

    .conversation-scroll-box {
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 4px;
    }

    .conversation-item {
        padding: 15px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .conversation-item:hover {
        background-color: #f5f5f5;
    }

    .conversation-item h4 {
        margin: 0 0 5px 0;
        color: #333;
    }

    .conversation-meta {
        font-size: 0.8em;
        color: #666;
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .conversation-preview {
        color: #444;
        font-size: 0.9em;
        margin: 0;
        line-height: 1.4;
    }
</style>

@code {
    private List<Conversation> recentConversations;

    protected override async Task OnInitializedAsync()
    {
        recentConversations = await _context.Conversations
        .OrderByDescending(c => c.CreatedAt)
        .Take(10)
        .ToListAsync();
    }

    private void NavigateToConversation(int id)
    {
        NavigationManager.NavigateTo($"/conversation/{id}");
    }

    private void NavigateToCreateDiscussion()
    {
        if (UserSession.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/add-conversation");
        }
        else
        {
            UserSession.RedirectUrl = "/add-conversation";
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToDiscussions()
    {
        NavigationManager.NavigateTo("/conversations");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/add-user");
    }

    private void NavigateToMedia()
    {
        NavigationManager.NavigateTo("/add-media");
    }

    private void NavigateToMediaGallery()
    {
        NavigationManager.NavigateTo("/media-gallery");
    }
}>