@page "/"
@using KalastusWebsite.Services
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@inject AppDbContext _context
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Kalastajien Yhteisö</PageTitle>



<div class="hero">
    <h1>Kalastajien yhteisö</h1>
    @if (!UserSession.IsLoggedIn)
    {
        <p>Liity jäseneksi, jaa kokemuksiasi, ja keskustele muiden kalastajien kanssa!</p>
        <button class="btn-register" @onclick="NavigateToRegister">Liity yhteisöön</button>
    }
</div>

<div class="main-container">
    

    <div class="left-section">
        <div class="welcome-message">
            @if (UserSession.IsLoggedIn)
            {
                <h2>Terve, @UserSession.Username!</h2>
            }
            else
            {
                <h2>Tervetuloa!</h2>
            }
        </div>
        <div class="side-buttons">
            <button class="btn-primary" @onclick="NavigateToKartta">Kartta</button>
            <button class="btn-profile" @onclick="NavigateToFishList">Kalalajit</button>
        </div>
    </div>

    <div class="latest-conversations">
        <h3>Uusimmat Keskustelut</h3>
        <div class="conversation-container">
            <div class="conversation-list">
                @if (latestConversations != null && latestConversations.Any())
                {
                    @foreach (var conversation in latestConversations)
                    {
                        <div class="conversation-box" @onclick="() => NavigateToConversation(conversation.Id)">
                            <h4>@conversation.Title</h4>
                            <p><small>Lähettäjä @conversation.Username @conversation.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                            </p>
                            <p>@(conversation.Content.Length > 100 ? conversation.Content.Substring(0, 100) + "..." :
                                    conversation.Content)</p>
                        </div>
                    }
                }
                else
                {
                    <p>Ei keskusteluja saatavilla.</p>
                }
            </div>
            <div class="conversation-buttons">
                <button class="btn-new" @onclick="NavigateToCreateDiscussion">+ Uusi keskustelu</button>
                <button class="btn-all" @onclick="NavigateToDiscussions">Kaikki keskustelut</button>
            </div>
        </div>
    </div>
</div>


<div class="recent-media">
    <h3>Uusimmat Kuvat</h3>
    <div class="media-carousel">
        <button @onclick="MoveBackward" class="carousel-arrow left-arrow">⬅</button>
        <div class="media-items">
            @if (recentMediaFiles != null && recentMediaFiles.Any())
            {
                @foreach (var media in visibleMediaFiles)
                {
                    <div class="media-box">
                        <a href="/image/@media.Id">
                            <img src="@media.FilePath" alt="Recent media" class="media-image" />
                        </a>
                        <p>
                            <small>
                                Lähettänyt:
                                <a href="/profile/@media.UploadedBy">@media.UploadedBy</a>
                            </small>
                        </p>
                    </div>
                }
            }
            else
            {
                <p>Ei uusia kuvia saatavilla.</p>
            }
        </div>
        <button @onclick="MoveForward" class="carousel-arrow right-arrow">➡</button>
    </div>

    <!-- Action buttons for media -->
    <div class="media-buttons">
        <button class="btn-media" @onclick="NavigateToMedia">+ Lisää mediaa</button>
        <button class="btn-gallery" @onclick="NavigateToMediaGallery">Kaikki kuvat</button>
    </div>
</div>



@code {
    private List<Conversation> latestConversations;

    private List<Media> recentMediaFiles;
    private List<Media> visibleMediaFiles = new(); // Tracks three currently visible images
    private int currentIndex = 0; // Tracks the start index of the visible images
    private string errorMessage;
    private bool isLoaded = false; 
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Try to load session with timeout
            var timeoutTask = Task.Delay(2000); // nosta millisekunti lukua jos tulee erroria sivun latauksesta
            var loadingTask = WaitForSession();
            
            var completedTask = await Task.WhenAny(timeoutTask, loadingTask);
            if (completedTask == timeoutTask)
            {
                errorMessage = "Sivun lataus epäonnistui. Yritä päivittää sivu.";
                return;
            }

            // Fetch data
            recentMediaFiles = await _context.MediaFiles
                .OrderByDescending(m => m.UploadedAt)
                .Take(5)
                .ToListAsync();

            latestConversations = await _context.Conversations
                .OrderByDescending(c => c.CreatedAt)
                .Take(5)
                .ToListAsync();

            UpdateVisibleMedia();
            isLoaded = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Virhe: {ex.Message}";
        }
    }

    private async Task WaitForSession()
    {
        var attempts = 0;
        while (!UserSession.IsLoaded && attempts < 50) // Max 5 seconds (100ms * 50)
        {
            await Task.Delay(100);
            attempts++;
        }
    }

    private void MoveForward()
    {
        if (recentMediaFiles != null && recentMediaFiles.Count > 3)
        {
            // Increment the index and loop back
            currentIndex = (currentIndex + 1) % recentMediaFiles.Count;
            UpdateVisibleMedia();
        }
    }

    private void MoveBackward()
    {
        if (recentMediaFiles != null && recentMediaFiles.Count > 3)
        {
            // Decrement the index and loop back
            currentIndex = (currentIndex - 1 + recentMediaFiles.Count) % recentMediaFiles.Count;
            UpdateVisibleMedia();
        }
    }

    private void UpdateVisibleMedia()
    {
        if (recentMediaFiles.Count >= 3)
        {
            visibleMediaFiles = new List<Media>
            {
                recentMediaFiles[currentIndex],
                recentMediaFiles[(currentIndex + 1) % recentMediaFiles.Count],
                recentMediaFiles[(currentIndex + 2) % recentMediaFiles.Count]
            };
        }
        else
        {
            // If fewer than 3 media files, display all available files
            visibleMediaFiles = recentMediaFiles.ToList();
        }
    }


    private void NavigateToConversation(int conversationId)
    {
        NavigationManager.NavigateTo($"/conversation/{conversationId}");
    }

    private void NavigateToCreateDiscussion()
    {
        if (UserSession.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/add-conversation");
        }
        else
        {
            UserSession.RedirectUrl = "/add-conversation";
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToDiscussions()
    {
        NavigationManager.NavigateTo("/conversations");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/add-user");
    }

    private void NavigateToMedia()
    {
        NavigationManager.NavigateTo("/add-media");
    }

    private void NavigateToMediaGallery()
    {
        NavigationManager.NavigateTo("/media-gallery");
    }

    private void NavigateToKartta()
    {
        NavigationManager.NavigateTo("/kartta");
    }

    private void NavigateToFishList()
    {
        NavigationManager.NavigateTo("/fishlist");
    }
}
