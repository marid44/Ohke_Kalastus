@page "/"
@using KalastusWebsite.Services
@using KalastusWebsite.Data
@using KalastusWebsite.Models
@inject AppDbContext _context
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject KalastusWebsite.Services.EventService EventService
@inject EventService EventService

<PageTitle>Kalastajien Yhteis√∂</PageTitle>



<div class="hero">
    <h1>Kalastajien yhteis√∂</h1>
    @if (!UserSession.IsLoggedIn)
    {
        <p>Liity j√§seneksi, jaa kokemuksiasi, ja keskustele muiden kalastajien kanssa!</p>
        <button class="btn-register" @onclick="NavigateToRegister">Liity yhteis√∂√∂n</button>
    }
</div>

<div class="main-container">
    

    <div class="left-section">
        <div class="welcome-message">
            @if (UserSession.IsLoggedIn)
            {
                <h2>Terve, @UserSession.Username!</h2>
            }
            else
            {
                <h2>Tervetuloa!</h2>
            }
        </div>
        <div class="side-buttons">
            <button class="btn-primary" @onclick="NavigateToKartta">Kartta</button>
            <button class="btn-profile" @onclick="NavigateToFishList">Kalalajit</button>
            <button class="btn-tapahtumat" @onclick="NavigateToEvents">Tapahtumat</button>
        </div>
    </div>

    <div class="latest-conversations">
    <div class="conversations-container">
        <!-- Left column -->
        <div class="conversations-section">
            <h3>Uusimmat Keskustelut</h3>
            <div class="conversation-list">
                @if (latestConversations != null && latestConversations.Any())
                {
                    @foreach (var conversation in latestConversations)
                    {
                        <div class="conversation-box" @onclick="() => NavigateToConversation(conversation.Id)">
                            <h4>@conversation.Title</h4>
                            <p><small>L√§hett√§j√§ @conversation.Username @conversation.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small></p>
                            <p>@(conversation.Content.Length > 100 ? conversation.Content.Substring(0, 100) + "..." : conversation.Content)</p>
                        </div>
                    }
                }
                else
                {
                    <p>Ei keskusteluja saatavilla.</p>
                }
            </div>
        </div>

        <!-- Right column -->
        <div class="conversations-section">
            <h3>Suosituimmat Keskustelut</h3>
            <div class="conversation-list">
                @if (popularConversations != null && popularConversations.Any())
                {
                    @foreach (var conversation in popularConversations)
                    {
                        <div class="conversation-box" @onclick="() => NavigateToConversation(conversation.Id)">
                            <h4>@conversation.Title</h4>
                            <p><small>L√§hett√§j√§ @conversation.Username @conversation.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small></p>
                            <p>üëç @conversation.VoteCount tykk√§yst√§</p>
                        </div>
                    }
                }
                else
                {
                    <p>Ei suosittuja keskusteluja.</p>
                }
            </div>
        </div>
    </div>

        <div class="conversation-buttons">
            <button class="btn-new" @onclick="NavigateToCreateDiscussion">+ Uusi keskustelu</button>
            <button class="btn-all" @onclick="NavigateToDiscussions">Kaikki keskustelut</button>
        </div>
    </div>
</div>

<div class="upcoming-events-carousel">
    <h3>Tulevat tapahtumat</h3>
    @if (upcomingEvents != null && upcomingEvents.Any())
    {
        <div class="event-display">
            <div class="event-box">
                <h4>@upcomingEvents[currentEventIndex].Title</h4>
                <p class="event-date">@upcomingEvents[currentEventIndex].Date.ToString("dd.MM.yyyy")</p>
                <p class="event-desc">@upcomingEvents[currentEventIndex].Description</p>
                <small>J√§rjest√§j√§: @upcomingEvents[currentEventIndex].CreatedBy</small>
            </div>
            <div class="carousel-indicators">
                @for (int i = 0; i < upcomingEvents.Count; i++)
                {
                    var index = i;
                    <span class="indicator @(index == currentEventIndex ? "active" : "")"
                          @onclick="() => SetCurrentEvent(index)"></span>
                }
            </div>
        </div>
    }
    else
    {
        <p>Ei tulevia tapahtumia seuraavan 90 p√§iv√§n aikana.</p>
    }
</div>

<div class="recent-media">
    <h3>Suosituimmat Kuvat</h3>
    <div class="media-carousel">
        <button @onclick="MoveBackward" class="carousel-arrow left-arrow">‚¨Ö</button>
        <div class="media-items">
            @if (popularMediaFiles?.Any() ?? false)
            {
                @foreach (var media in visibleMediaFiles)
                {
                    <div class="media-box">
                        <a href="/image/@media.Id">
                            <img src="@media.FilePath" alt="Popular media" class="media-image" />
                        </a>
                        <p>
                            <small>
                                L√§hett√§nyt:
                                <a href="/profile/@media.UploadedBy">@media.UploadedBy</a>
                            </small>
                        </p>
                        <p>üëç @media.Votes.Count(v => v.IsUpVote) tykk√§yst√§</p>
                    </div>
                }
            }
            else
            {
                <p>Ei suosittuja kuvia saatavilla.</p>
            }
        </div>
        <button @onclick="MoveForward" class="carousel-arrow right-arrow">‚û°</button>
    </div>

    <div class="media-buttons">
        <button class="btn-media" @onclick="NavigateToMedia">+ Lis√§√§ mediaa</button>
        <button class="btn-gallery" @onclick="NavigateToMediaGallery">Kaikki kuvat</button>
    </div>
</div>



@code {
    private List<Conversation> latestConversations;
    private List<ConversationWithVotes> popularConversations;

    private List<Event> upcomingEvents;
    private int currentEventIndex = 0;
    private System.Threading.Timer carouselTimer;

    private class ConversationWithVotes : Conversation
    {
        public int VoteCount { get; set; }
    }


    private List<Media> popularMediaFiles = new();
    private List<Media> visibleMediaFiles = new(); // Tracks three currently visible images
    private int currentIndex = 0; // Tracks the start index of the visible images
    private string errorMessage;
    private bool isLoaded = false; 
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await WaitForSession();

            // Fetch popular media from last 30 days
            var thirtyDaysAgo = DateTime.Now.AddDays(-30);
            popularMediaFiles = await _context.MediaFiles
                .Include(m => m.Votes)
                .Where(m => m.UploadedAt >= thirtyDaysAgo)
                .OrderByDescending(m => m.Votes.Count(v => v.IsUpVote))
                .Take(5)
                .ToListAsync();

            // Fetch latest conversations
            latestConversations = await _context.Conversations
                .OrderByDescending(c => c.CreatedAt)
                .Take(5)
                .ToListAsync();

            // Fetch popular conversations
            popularConversations = await _context.Conversations
                .Where(c => c.CreatedAt >= thirtyDaysAgo)
                .Select(c => new ConversationWithVotes
                {
                    Id = c.Id,
                    Title = c.Title,
                    Content = c.Content,
                    Username = c.Username,
                    CreatedAt = c.CreatedAt,
                    VoteCount = _context.ConversationVotes
                        .Count(v => v.ConversationId == c.Id && v.IsUpVote)
                })
                .OrderByDescending(c => c.VoteCount)
                .Take(5)
                .ToListAsync();

            UpdateVisibleMedia();
            isLoaded = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Virhe: {ex.Message}";
        }

        await base.OnInitializedAsync();
        upcomingEvents = await EventService.GetUpcomingEventsAsync();

        if (upcomingEvents != null && upcomingEvents.Any())
        {
            StartCarousel();
        }

    }

    private void StartCarousel()
    {
        carouselTimer = new System.Threading.Timer(
            async _ =>
            {
                currentEventIndex = (currentEventIndex + 1) % upcomingEvents.Count;
                await InvokeAsync(StateHasChanged);
            },
            null,
            TimeSpan.FromSeconds(5),
            TimeSpan.FromSeconds(5)
        );
    }

    private void SetCurrentEvent(int index)
    {
        currentEventIndex = index;
        StateHasChanged();
    }

    public void Dispose()
    {
        carouselTimer?.Dispose();
    }

    private async Task WaitForSession()
    {
        var attempts = 0;
        while (!UserSession.IsLoaded && attempts < 50) // Max 5 seconds (100ms * 50)
        {
            await Task.Delay(100);
            attempts++;
        }
    }

    private void MoveForward()
    {
        if (popularMediaFiles != null && popularMediaFiles.Count > 3)
        {
            // Increment the index and loop back
            currentIndex = (currentIndex + 1) % popularMediaFiles.Count;
            UpdateVisibleMedia();
        }
    }

    private void MoveBackward()
    {
        if (popularMediaFiles != null && popularMediaFiles.Count > 3)
        {
            // Decrement the index and loop back
            currentIndex = (currentIndex - 1 + popularMediaFiles.Count) % popularMediaFiles.Count;
            UpdateVisibleMedia();
        }
    }

    private void UpdateVisibleMedia()
    {
        if (popularMediaFiles.Count >= 3)
        {
            visibleMediaFiles = new List<Media>
            {
                popularMediaFiles[currentIndex],
                popularMediaFiles[(currentIndex + 1) % popularMediaFiles.Count],
                popularMediaFiles[(currentIndex + 2) % popularMediaFiles.Count]
            };
        }
        else
        {
            visibleMediaFiles = popularMediaFiles.ToList();
        }
    }


    private void NavigateToConversation(int conversationId)
    {
        NavigationManager.NavigateTo($"/conversation/{conversationId}");
    }

    private void NavigateToCreateDiscussion()
    {
        if (UserSession.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/add-conversation");
        }
        else
        {
            UserSession.RedirectUrl = "/add-conversation";
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToDiscussions()
    {
        NavigationManager.NavigateTo("/conversations");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/add-user");
    }

    private void NavigateToMedia()
    {
        NavigationManager.NavigateTo("/add-media");
    }

    private void NavigateToMediaGallery()
    {
        NavigationManager.NavigateTo("/media-gallery");
    }

    private void NavigateToKartta()
    {
        NavigationManager.NavigateTo("/kartta");
    }

    private void NavigateToFishList()
    {
        NavigationManager.NavigateTo("/fishlist");
    }
    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/events");
    }
}


<style>
    /* Yhteinen tyyli kaikille painikkeille */
    button {
        padding: 10px 20px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
        margin: 10px;
    }

    button:hover {
        transform: scale(1.05);
        /* Korostettu hover-animaatio */
    }

    /* Painikkeiden yksil√∂lliset v√§rit */
        .btn-register {
        background-color: #007bff;
        /* Sininen */
        color: white;
        z-index: 2; /* Ensure the button is above the dark layer */
        position: relative; /* Required for z-index to work */
    }

    .btn-register:hover {
        background-color: #0056b3;
    }

    .btn-media {
        background-color: #007bff;
        /* Syaani */
        color: white;
    }

    .btn-media:hover {
        background-color: #007bff;
    }

    .btn-profile {
        background-color: #007bff;
        /* Harmaa */
        color: white;
    }

    .btn-profile:hover {
        background-color: #007bff;
    }

    .btn-gallery {
        background-color: #007bff;
        /* Tumma */
        color: white;
    }

    .btn-gallery:hover {
        background-color: #007bff;
    }

    /* Hero-osio */
    .hero {
        background-image: url('/kalastus banner.jpg');
        background-size: cover;
        background-position: center;
        text-align: center;
        padding: 80px 20px;
        color: white;
        border-radius: 10px;
        margin-bottom: 20px;
        position: relative;
        z-index: 0;
    }

    .hero::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Transparent musta kerros */
        border-radius: 10px;
        z-index: 1; /* Asetetaan tekstin alle */
    }

    .hero h1,
    .hero p {
        position: relative;
        z-index: 2; /* Varmistetaan, ett√§ teksti on tummennuksen yl√§puolella */
    }

    .welcome-message {
        text-align: center;
        margin-bottom: 20px; /* Increased margin at the bottom for more spacing */
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        padding: 15px 30px; /* Slightly increased padding for better alignment and spacing */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 300px; /* Set a fixed width for consistency */
        margin-left:  40px;
    }

    .welcome-message h2 {
        color: #333;
        font-size: 1.7em; /* Slightly larger font for emphasis */
        margin: 0;
    }



    .main-container {
        display: flex;
        gap: 10px; /* Reduced gap */
        align-items: flex-start;
    }


    .container {
        text-align: center;
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        padding: 10px 20px;
        /* Reduced padding */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        width: fit-content;
        /* Automatically adjust width based on content */
        margin: 0 auto;
        /* Center the container horizontally */
    }

    .left-section {
        flex: 0 0 auto; /* Don't grow, don't shrink, auto basis */
    }

    .side-buttons {
        display: flex;
        flex-direction: column;
        gap: 20px;
        flex-shrink: 0;
        padding-right: 20px;
        margin-right: 20px; /* Reduced from 40px */
        margin-left: 40px;
    }

    .side-buttons button {
        padding: 15px 35px; /* Increased padding for a wider look */
        font-size: 1.1em; /* Larger font size */
        width: 300px; /* Adjusted button width */
        border-radius: 8px; /* Slightly rounded corners */
    }

    /* Kartta button styling */
    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    /* Kalalajit button styling */
    .btn-profile {
        background-color: #28a745;
        color: white;
    }

    .btn-profile:hover {
        background-color: #218838;
    }

    .welcome-message h2 {
        color: #333;
    }

    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }

    .latest-conversations {
        flex: 1.5; /* Takes more space horizontally */
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .conversations-container {
        display: flex;
        gap: 20px;
        width: 100%;
        margin-bottom: 20px;
    }

    .conversations-section {
        flex: 1;
        min-width: 0;
        padding: 15px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        height: 300px; /* Reduced from 600px to show ~2 conversations */
        display: flex;
        flex-direction: column;
    }

    .conversations-section h3 {
        font-size: 1.3em;
        margin-bottom: 15px;
        text-align: center;
        color: #333;
    }

    /* Scrollable conversation list */
    .conversation-list {
        max-height: 500px;
        overflow-y: auto;
        padding-right: 10px;
        scrollbar-width: thin;
        scrollbar-color: #888 #f1f1f1;
    }

    .conversation-list::-webkit-scrollbar {
        width: 6px;
    }

    .conversation-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .conversation-list::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    .conversation-list::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* Conversation boxes */
        .conversation-box {
        margin-bottom: 10px; /* Reduced margin */
        padding: 12px; /* Slightly reduced padding */
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .conversation-box:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .conversations-section h3 {
        margin-bottom: 10px; /* Reduced margin */
        font-size: 1.2em;
    }

    .conversation-box h4 {
        margin: 0 0 10px 0;
        font-size: 1.1em;
        color: #2c3e50;
    }

    .conversation-box p {
        margin: 5px 0;
        color: #666;
        font-size: 0.9em;
        line-height: 1.4;
    }

    .conversation-box small {
        color: #999;
        font-size: 0.8em;
    }

    /* Action buttons */
    .conversation-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 20px;
    }

    .conversation-buttons button {
        padding: 10px 20px;
        font-size: 0.9em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .conversation-buttons .btn-new {
        background-color: #28a745;
        color: white;
    }

    .conversation-buttons .btn-new:hover {
        background-color: #218838;
        transform: translateY(-2px);
    }

    .conversation-buttons .btn-all {
        background-color: #007bff;
        color: white;
    }

    .conversation-buttons .btn-all:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
    }


    /*Media stuff*/

    /* Recent Media Section */
    .recent-media {
        width: 50%;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .media-carousel {
        display: flex;
        align-items: center;
        gap: 10px;
        position: relative;
    }

    .media-items {
        display: flex;
        gap: 15px;
        overflow: hidden;
        width: 100%;
        justify-content: center;
    }

    .media-box {
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        width: 45%;
        max-width: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .media-box:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .media-image {
        width: 150px;
        /* Fixed width for all images */
        height: 150px;
        /* Fixed height for all images */
        object-fit: cover;
        /* Ensures the image fills the box while maintaining aspect ratio */
        border-radius: 6px;
        margin-bottom: 5px;
        background-color: #f1f1f1;
        /* Placeholder color for any unloaded images */
    }


    .carousel-arrow {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .carousel-arrow:hover {
        background-color: #0056b3;
        transform: scale(1.1);
    }

    .left-arrow {
        margin-right: auto;
    }

    .right-arrow {
        margin-left: auto;
    }

    .media-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        justify-content: center;
    }

    .media-buttons button {
        padding: 10px 20px;
        font-size: 0.9em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-media {
        background-color: #28a745;
        /* Green for upload */
        color: white;
    }

    .btn-media:hover {
        background-color: #218838;
    }

    .btn-gallery {
        background-color: #007bff;
        /* Blue for browse */
        color: white;
    }

    .btn-gallery:hover {
        background-color: #0056b3;
    }

    .btn-tapahtumat {
        background-color: #007bff;
        /* Blue for browse */
        color: white;
    }

    .upcoming-events-carousel {
        margin: 20px auto;
        padding: 20px;
        max-width: 800px;
    }

    .event-display {
        position: relative;
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .carousel-indicators {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 15px;
    }

    .indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: #ddd;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .indicator.active {
        background-color: #007bff;
    }

    .event-date {
        color: #007bff;
        font-weight: bold;
    }

    .event-desc {
        margin: 10px 0;
    }


</style>
