@page "/profile/{username}"
@using KalastusWebsite.Services
@using KalastusWebsite.Models
@using KalastusWebsite.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<div class="profile-container">
    <!-- Takaisin-painike -->
    <div class="back-button-container">
        <button class="back-button" @onclick="NavigateToHome">←</button>
    </div>

    @if (userProfile != null)
    {
        <div class="profile-header">
            <!-- Profiilikuva -->
            <div class="profile-picture-container">
                <label for="fileInput">
                    <img src="@userProfile.ProfileImagePath" alt="Profiilikuva" class="profile-picture" />
                </label>
                <InputFile id="fileInput" OnChange="HandleProfileImageUpload" class="hidden-input" />
            </div>

            <!-- Bio ja nimi -->
            <div class="profile-info">
                <h2>@userProfile.User?.Username</h2>
                <div class="bio-display-box">
                    @if (isEditingBio)
                    {
                        <textarea class="textarea-container" @bind="userProfile.Bio"></textarea>
                        <button class="btn-primary" @onclick="SaveBio">Tallenna</button>
                        <button class="btn-delete" @onclick="CancelEdit">Peruuta</button>
                    }
                    else
                    {
                        <p>@userProfile.Bio</p>
                        @if (UserSession.Username == userProfile.User?.Username)
                        {
                            <button class="btn-primary" @onclick="EditBio">Muokkaa</button>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Media-osio -->
        <div class="media-section">
            <h3>Ladatut mediat:</h3>
            @if (userMedia.Any())
            {
                <div class="media-gallery">
                    @foreach (var media in userMedia)
                    {
                        <div class="media-item">
                            @if (media.FileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase))
                            {
                                <video controls>
                                    <source src="@media.FilePath" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            }
                            else
                            {
                                <a href="/image/@media.Id">
                                    <img src="@media.FilePath" alt="Ladattu media" />
                                </a>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="no-media">Käyttäjällä ei ole ladattuja medioita.</p>
            }
        </div>
    }
    else
    {
        <p class="error-message">Käyttäjää ei löytynyt.</p>
    }
</div>

@code {
    [Parameter] public string? username { get; set; }
    private UserProfile? userProfile;
    private List<Media> userMedia = new();
    private string? bioSavedMessage;
    private string? imageUploadMessage;
    private bool isEditingBio = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(username))
        {
            try
            {
                userProfile = await DbContext.UserProfiles
                .Include(up => up.User)
                .FirstOrDefaultAsync(up => up.User!.Username == username);

                if (userProfile != null)
                {
                    userMedia = await DbContext.MediaFiles
                    .Where(m => m.UploadedBy == username)
                    .ToListAsync();
                }
                else
                {
                    bioSavedMessage = "Käyttäjää ei löytynyt.";
                }
            }
            catch (Exception ex)
            {
                bioSavedMessage = $"Virhe profiilin lataamisessa: {ex.Message}";
            }
        }
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/"); // Takaisin etusivulle
    }

    private void EditBio()
    {
        isEditingBio = true;
    }

    private void CancelEdit()
    {
        isEditingBio = false;
    }

    private async Task SaveBio()
    {
        if (userProfile != null)
        {
            try
            {
                DbContext.UserProfiles.Update(userProfile);
                await DbContext.SaveChangesAsync();
                bioSavedMessage = "Bioteksti tallennettu onnistuneesti!";
                isEditingBio = false;
            }
            catch (Exception ex)
            {
                bioSavedMessage = $"Virhe tallennuksessa: {ex.Message}";
            }
        }
    }

    private async Task HandleProfileImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadFolder = Path.Combine(Environment.WebRootPath, "profile-images");
            if (!Directory.Exists(uploadFolder))
            {
                Directory.CreateDirectory(uploadFolder);
            }

            var filePath = Path.Combine(uploadFolder, file.Name);

            try
            {
                using var stream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream(10 * 1024 * 1024).CopyToAsync(stream);

                userProfile.ProfileImagePath = $"/profile-images/{file.Name}";
                DbContext.UserProfiles.Update(userProfile);
                await DbContext.SaveChangesAsync();

                imageUploadMessage = "Profiilikuva päivitetty onnistuneesti!";
            }
            catch (Exception ex)
            {
                imageUploadMessage = $"Virhe profiilikuvan tallennuksessa: {ex.Message}";
            }
        }
    }
}

<style>
    .profile-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        font-family: Arial, sans-serif;
        text-align: center;
    }

    .back-button-container {
        margin-bottom: 20px;
        text-align: left;
    }

    .back-button {
        background: none;
        border: none;
        font-size: 18px;
        color: #007bff;
        cursor: pointer;
    }

    .back-button:hover {
        text-decoration: underline;
    }

    .profile-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0px;
        margin-bottom: 20px;
    }

    .profile-picture-container {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f0f0f0;
        box-shadow: 0 4px 8px rgba(15, 15, 15, 0.772);
    }

    .profile-picture {
        width: 140px;
        height: 140px;
        object-fit: cover;
        border-radius: 50%;
    }

    .profile-picture:hover {
        transform: scale(1.1);
    }

    .hidden-input {
        display: none;
    }

    .profile-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    .bio-display-box {
        width: 100%;
        max-width: 300px;
        background-color: white;
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 3px 10px rgba(15, 15, 15, 0.434);
        text-align: center;
        margin: 10px center 40px center;
    }

    .bio-display-box p {
        font-size: 16px;
        color: #555;
        margin: 0;
        line-height: 1.5;
        word-wrap: break-word;
        white-space: normal;
    }

    .btn-primary {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-right: 10px;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-delete {
        padding: 10px 20px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-delete:hover {
        background-color: #a71d2a;
    }

    .media-section {
        margin-top: 20px;
        text-align: center;
    }

    .media-gallery {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
        margin: 10px center;
        padding: 1;
        max-width: 500px;
    }

    .media-item {
        position: relative;
        width: 100%;
        padding-top: 100%;
        overflow: hidden;
        background-color: #f0f0f0;
        border-radius: 5px;
    }

    .media-item:hover {
        transform: scale(1.1);
    }

    .media-item img,
    .media-item video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        margin: 0;
        padding: 0;
        display: block;
        border-radius: 5px;
    }

    .success-message {
        color: green;
        font-size: 14px;
    }

    .error-message {
        color: red;
        font-size: 14px;
    }
</style>
