@inherits LayoutComponentBase
@inject Services.UserSession UserSession
@inject IJSRuntime JSRuntime

<PageTitle>KalastusWebsite</PageTitle>

<div class="page">
    <main>
        <div class="top-row px-4">
            <button class="btn btn-link" @onclick="NavigateToHome" style="margin-right: auto;">Etusivu</button>

            @if (UserSession.IsLoggedIn)
            {
                <button class="btn btn-link" @onclick="Logout">Kirjaudu ulos</button>
                <button class="btn btn-link" @onclick="NavigateToProfile">Profiili</button>
            }
            @if (!UserSession.IsLoggedIn)
            {
                <button class="btn btn-link" @onclick="NavigateToRegister">Rekisteröidy</button>
                <button class="btn btn-link" @onclick="NavigateToLogin">Kirjaudu</button>
                
            }
            <button class="toggle-sidebar-btn" @onclick="ToggleSidebar">☰</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>

    <div class="sidebar" style="@(isSidebarVisible ? "display: block;" : "display: none;")">
        <NavMenu />
    </div>
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; }

    private bool isSidebarVisible = false; // Tracks whether the sidebar is visible

    // Toggles the visibility of the sidebar
    private void ToggleSidebar()
    {
        isSidebarVisible = !isSidebarVisible;
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private bool firstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.firstRender)
        {
            this.firstRender = false;
            await UserSession.LoadSession();
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        // First clear map and markers
        await JSRuntime.InvokeVoidAsync("clearMap");
        await JSRuntime.InvokeVoidAsync("resetMarkerCount");

        // Then clear the session
        await UserSession.ClearSession();

        // Finally redirect
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/add-user");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToProfile()
    {
        if (UserSession.IsLoggedIn)
        {
            NavigationManager.NavigateTo($"/profile/{UserSession.Username}");
        }
        else
        {
            UserSession.RedirectUrl = "/profile";
            NavigationManager.NavigateTo("/login");
        }
    }
}
